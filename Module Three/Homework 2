#!/usr/bin/env python
# coding: utf-8

# ## Module 5
# 
# In this assignment, you are going to work on Histograms and Scatterplots.
# 
# We have preprocessed the data as "df" for you. 
# 
# Follow the instructions and finish the rest part.

# In[1]:


get_ipython().run_cell_magic('capture', '', '###########################################################\n### EXECUTE THIS CELL BEFORE YOU TO TEST YOUR SOLUTIONS ###\n###########################################################\nimport imp, os, sys\nsol = imp.load_compiled("solutions", "./solutions.py")\nsol.get_solutions("imdb.xlsx")\nfrom nose.tools import assert_equal\nfrom pandas.util.testing import assert_frame_equal, assert_series_equal')


# In[2]:


# Loading the data
import pandas as pd
import numpy as np

xls = pd.ExcelFile('imdb.xlsx')
df = xls.parse('imdb')
df_directors = xls.parse('directors')
df_countries = xls.parse('countries')

df = pd.merge(left=df, right=df_countries, 
              how='inner', left_on='country_id', 
              right_on='id')

df = pd.merge(left=df, right=df_directors, 
              how='inner', left_on='director_id', 
              right_on='id')

print("Finished.")


# In[4]:


"""Q1: 
Is how much a movie makes indicative of how good it is?
Make a simple scatter plot comparing gross to imdb_score for movies during or after 2000 (title_year >= 2000) and before 2000 (title_year < 2000).
It may be useful to scale the x axis demarking gross. (Hint: Divide the gross amount by 1,000,000.)
Remember to put a legend indicating which color corresponds to which years.
What is your verdict?

Save your plot in a variable called plt1, and your dataframes in variables called df_after_2000 and df_before_2000
"""

import matplotlib.pyplot as plt1

# your code here
df_year = df['title_year']
df_after_2000  = df[df_year >= 2000]        
df_before_2000 = df[df_year < 2000]

plt1.scatter(
    df_before_2000['imdb_score'], df_before_2000["gross"],
    marker = "o",
    color = 'r',
    alpha = 0.7

)

plt1.scatter(
    df_after_2000["imdb_score"], df_after_2000["gross"],
    marker = "o",
    color = 'r',
    alpha = 0.7
    

)

plt1.xlabel = ('rating')
plt1.ylabel = ('Not sure yet')

plt1.show()


# In[5]:


assert_frame_equal(df_before_2000, sol.df_before_2000)
assert_frame_equal(df_after_2000, sol.df_after_2000)
np.testing.assert_array_equal(plt1, sol.plt1)
print("Success!")


# In[38]:


"""Q2: 
Using numpy and pyplot, make an overlapping histogram that shows the score distribution vs. count of R-Rated movies and PG-13 ones.
Describe your plot. 

Save your plot in a variable called plt2, and your dataframes in variables called df_R and df_PG13
"""

import matplotlib.pyplot as plt2

# your code here

df_R = df.loc[(df['content_rating'] == 'R')]
df_PG13 = df.loc[(df['content_rating'] == 'PG-13')]

fig=plt2.figure()
ax=fig.add_axes([0,0,1,1])

ax.hist(df['imdb_score'])
ax.hist(df_R['content_rating'])
ax.hist(df_PG13['content_rating'])

plt2.legend(["imdb_score", "R","PG-13"])

plt2.show() 


# In[36]:


assert_frame_equal(df_R, sol.df_R)
assert_frame_equal(df_PG13, sol.df_PG13)
np.testing.assert_array_equal(plt2, sol.plt2)
print("Success!")

